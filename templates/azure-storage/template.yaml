apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: azure-storage-account
  title: Azure Storage Account
  description: A Template to creates a storage account on Azure Public Cloud
  jenkins.io/job-full-name: folder-name/job-name
  tags: ['azure']
spec:
  owner: user:guest
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill Azure storage account details
      required:
        - tenant
        - location
        - name
        - containername
      properties:
        tenant:
          title: Tenant Name
          type: string
          description: Tenant Name on Azure Data Platform
          ui:autofocus: true
          ui:options:
            rows: 1
        name:
          title: Storage Account Name
          type: string
          description: Name of the storage account to be created for domain Data Lake
        location:
          title: Location
          type: string
          description: Azure region to which storage account needs to be deployed
        containername:
          title: Storage Container Name
          type: string
          description: Name of the container to be created for domain Data Lake
    - title: Choose an Azure Environment to deploy
      required:
        - env
        - subscription
        - resourcegroup
      properties:
        env:
          title: Environement Type
          type: string
          description: Select env. type dev or prod
          default: dev
          enum:
            - dev
            - test
            - acc
            - prod
        subscription:
          title: Azure Subscription ID
          type: string
          description: Select a Azure Subscription
          default: 9cagts3k-c4f9-48cc-8ef6-74jksks0a0ak
          enum:
            - 9cagts3k-c4f9-48cc-8ef6-74jksks0a0ak
            - 67dkd8sj-200f-46cb-a5a9-6dhs383js8s9
        resourcegroup:
          title: Resource Group
          type: string
          maxLength: 30
          pattern: '^DEMO-DL-([a-zA-Z][a-zA-Z]*)(-[a-zA-Z]+)*-rg$'
          description: Fill in a Azure Resource Group Name in format DEMO-DL-<tenant_name>-<env>-rg
    - title: Choose a github location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          dp_env: ${{ parameters.env }}
          tenant_name: ${{ parameters.tenant }}
          location: ${{ parameters.location }}
          resource_group_name: ${{ parameters.resourcegroup }}
          dl_storage_account_name: ${{ parameters.name }}
          dl_container_name: ${{ parameters.containername }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          subscription: ${{ parameters.subscription }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
